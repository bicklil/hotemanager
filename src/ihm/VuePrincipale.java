/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ihm;

import java.util.Date;
import java.util.HashMap;
import java.util.List;

/**
 * VuePrincipale de l'IHM, offre les fonctionnalités suivantes à l'utilisateur :
 * - Visualiser les réservations
 * - Visualiser les chambres disponibles à la réservation
 * - Réserver une chambre
 * - S'authentifier pour accéder à la vue de gestion des chambres
 * - Afficher les réservations d'une chambre en particulier
 * - Etablir une facture associée à un client
 * - Créer un nouveau client et rechercher un client existant
 * @author riviere
 */
public class VuePrincipale extends javax.swing.JPanel implements HotelListener {

    private final Controleur controleur;
    private final TableReservations tableR;

    private boolean updated = false;
    private final String login = "directeur";
    private final char[] password = {'m', '1', 'i', 'd', 'l'};

    public VuePrincipale(Controleur controleur) {
        this.controleur = controleur;
        tableR = new TableReservations();
        initComponents();
        errorLabel.setVisible(false);
    }

    /**
     * Permet d'affiche le message d'erreur en paramètre dans la zone appropriée
     *
     * @param message d'erreur à afficher
     */
    public void afficherErreur(String message) {
        errorLabel.setText(message);
        errorLabel.setVisible(true);
    }

    /**
     * Rend la zone d'affichage des messages d'erreur invisible
     */
    public void cacherErreur() {
        errorLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listChambres = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableResa = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        rechercherB = new javax.swing.JButton();
        nbNuitsF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tailleF = new javax.swing.JTextField();
        dateF = new javax.swing.JTextField();
        afficherB = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        numResaF = new javax.swing.JTextField();
        factureB = new javax.swing.JButton();
        reserverB = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        numChambreF = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        loginF = new javax.swing.JTextField();
        passwordF = new javax.swing.JPasswordField();
        gererB = new javax.swing.JButton();
        creerB = new javax.swing.JButton();
        rechercherCB = new javax.swing.JButton();
        nomC = new javax.swing.JTextField();
        prenomC = new javax.swing.JTextField();
        idC = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        idCR = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        dateC = new javax.swing.JTextField();
        JLabelDateC = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        effacerB = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        errorLabel = new javax.swing.JTextArea();

        setPreferredSize(new java.awt.Dimension(900, 450));
        setLayout(null);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Reservations");
        add(jLabel3);
        jLabel3.setBounds(360, 10, 117, 22);

        listChambres.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listChambres);

        add(jScrollPane1);
        jScrollPane1.setBounds(710, 120, 157, 210);

        jLabel1.setText("Chambres disponibles");
        add(jLabel1);
        jLabel1.setBounds(720, 100, 150, 14);

        tableResa.setModel(tableR);
        jScrollPane2.setViewportView(tableResa);

        add(jScrollPane2);
        jScrollPane2.setBounds(72, 60, 590, 100);

        jLabel4.setText("Reservations en cours");
        add(jLabel4);
        jLabel4.setBounds(80, 40, 140, 14);

        rechercherB.setText("Rechercher chambres disponibles");
        rechercherB.setEnabled(false);
        rechercherB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercherBActionPerformed(evt);
            }
        });
        add(rechercherB);
        rechercherB.setBounds(330, 240, 240, 30);

        nbNuitsF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nbNuitsFKeyReleased(evt);
            }
        });
        add(nbNuitsF);
        nbNuitsF.setBounds(440, 210, 50, 20);

        jLabel5.setText("Taille");
        jLabel5.setToolTipText("");
        add(jLabel5);
        jLabel5.setBounds(530, 190, 38, 14);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(jComboBox1);
        jComboBox1.setBounds(590, 210, 80, 20);

        jLabel6.setText("Catégorie");
        add(jLabel6);
        jLabel6.setBounds(600, 190, 80, 10);

        jLabel2.setText("Date début (jj/mm/aaaa)");
        jLabel2.setToolTipText("");
        add(jLabel2);
        jLabel2.setBounds(280, 190, 150, 20);

        jLabel9.setText("Nombre de nuits");
        add(jLabel9);
        jLabel9.setBounds(420, 190, 110, 14);
        add(tailleF);
        tailleF.setBounds(520, 210, 47, 20);

        dateF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateFKeyReleased(evt);
            }
        });
        add(dateF);
        dateF.setBounds(300, 210, 100, 20);

        afficherB.setText("Afficher Réservations");
        afficherB.setEnabled(false);
        add(afficherB);
        afficherB.setBounds(490, 313, 140, 30);

        jLabel11.setText("Numéro réservation");
        add(jLabel11);
        jLabel11.setBounds(290, 390, 120, 20);

        numResaF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                numResaFKeyReleased(evt);
            }
        });
        add(numResaF);
        numResaF.setBounds(410, 390, 59, 20);

        factureB.setText("Etablir Facture");
        factureB.setEnabled(false);
        add(factureB);
        factureB.setBounds(490, 390, 140, 23);

        reserverB.setText("Réserver");
        reserverB.setEnabled(false);
        reserverB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserverBActionPerformed(evt);
            }
        });
        add(reserverB);
        reserverB.setBounds(730, 340, 110, 30);

        jLabel12.setText("Numéro chambre");
        add(jLabel12);
        jLabel12.setBounds(300, 320, 120, 20);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listChambres, org.jdesktop.beansbinding.ELProperty.create("${selectedElement}"), numChambreF, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        numChambreF.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                numChambreFCaretUpdate(evt);
            }
        });
        add(numChambreF);
        numChambreF.setBounds(410, 320, 59, 20);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel7.setText("Login");

        jLabel8.setText("Mot de passe");

        loginF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                loginFKeyReleased(evt);
            }
        });

        passwordF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordFKeyReleased(evt);
            }
        });

        gererB.setText("Gérer les chambres");
        gererB.setEnabled(false);
        gererB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gererBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(loginF, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(passwordF, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(gererB, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(loginF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(passwordF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(gererB)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        add(jPanel1);
        jPanel1.setBounds(20, 320, 240, 130);

        creerB.setText("Creer Client");
        creerB.setEnabled(false);
        add(creerB);
        creerB.setBounds(150, 280, 120, 23);

        rechercherCB.setText("Rechercher Client");
        rechercherCB.setEnabled(false);
        rechercherCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercherCBActionPerformed(evt);
            }
        });
        add(rechercherCB);
        rechercherCB.setBounds(10, 280, 140, 23);

        nomC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nomCKeyReleased(evt);
            }
        });
        add(nomC);
        nomC.setBounds(50, 200, 80, 20);
        add(prenomC);
        prenomC.setBounds(150, 200, 80, 20);

        idC.setEnabled(false);
        idC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                idCKeyReleased(evt);
            }
        });
        add(idC);
        idC.setBounds(150, 250, 80, 20);

        jLabel10.setText("Nom");
        add(jLabel10);
        jLabel10.setBounds(70, 180, 50, 14);

        jLabel13.setText("Prénom");
        add(jLabel13);
        jLabel13.setBounds(170, 180, 60, 14);

        jLabel14.setText("Identifiant");
        add(jLabel14);
        jLabel14.setBounds(160, 230, 70, 14);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, idC, org.jdesktop.beansbinding.ELProperty.create("${text}"), idCR, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        idCR.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                idCRCaretUpdate(evt);
            }
        });
        add(idCR);
        idCR.setBounds(760, 380, 70, 20);

        jLabel15.setText("Client");
        add(jLabel15);
        jLabel15.setBounds(720, 380, 50, 14);
        add(dateC);
        dateC.setBounds(50, 250, 80, 20);

        JLabelDateC.setText("Date naissance");
        add(JLabelDateC);
        JLabelDateC.setBounds(50, 230, 110, 14);

        jButton1.setText("R");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(0, 213, 40, 30);

        effacerB.setText("Effacer");
        effacerB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                effacerBActionPerformed(evt);
            }
        });
        add(effacerB);
        effacerB.setBounds(580, 240, 90, 30);

        jScrollPane3.setForeground(new java.awt.Color(255, 0, 51));
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane3.setAutoscrolls(true);
        jScrollPane3.setEnabled(false);

        errorLabel.setEditable(false);
        errorLabel.setBackground(new java.awt.Color(240, 240, 240));
        errorLabel.setColumns(20);
        errorLabel.setForeground(new java.awt.Color(255, 51, 51));
        errorLabel.setLineWrap(true);
        errorLabel.setRows(5);
        errorLabel.setBorder(null);
        errorLabel.setDisabledTextColor(new java.awt.Color(255, 0, 0));
        errorLabel.setEnabled(false);
        errorLabel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        errorLabel.setOpaque(false);
        jScrollPane3.setViewportView(errorLabel);

        add(jScrollPane3);
        jScrollPane3.setBounds(700, 0, 170, 92);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void loginFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loginFKeyReleased
        if ((!loginF.getText().equalsIgnoreCase("")) && (passwordF.getPassword().length != 0)) {
            gererB.setEnabled(true);
        } else {
            gererB.setEnabled(false);
        }
    }//GEN-LAST:event_loginFKeyReleased

    private void passwordFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFKeyReleased
        if ((!loginF.getText().equalsIgnoreCase("")) && (passwordF.getPassword().length != 0)) {
            gererB.setEnabled(true);
        } else {
            gererB.setEnabled(false);
        }
    }//GEN-LAST:event_passwordFKeyReleased

    private boolean comparePassword(char[] aTester) {
        for (int i = 0; i < aTester.length; i++) {
            if (aTester[i] != password[i]) {
                return false;
            }
        }
        return true;
    }

    private void gererBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gererBActionPerformed
        if ((loginF.getText().equals(login)) && (comparePassword(passwordF.getPassword()))) {
            loginF.setText("");
            passwordF.setText("");
            controleur.afficherGestion();
            errorLabel.setVisible(false);
        } else {
            afficherErreur("Login / mot de passe incorrect !");
        }

    }//GEN-LAST:event_gererBActionPerformed

    private void rechercherBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercherBActionPerformed
        updated = true;
        controleur.filtrerDispoChambres(dateF.getText(), nbNuitsF.getText(), tailleF.getText());
    }//GEN-LAST:event_rechercherBActionPerformed

    private void dateFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateFKeyReleased
        updated = false;
        if ((!dateF.getText().isEmpty()) && (!nbNuitsF.getText().isEmpty())) {
            rechercherB.setEnabled(true);
        } else {
            rechercherB.setEnabled(false);
        }
    }//GEN-LAST:event_dateFKeyReleased

    private void nbNuitsFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nbNuitsFKeyReleased
        updated = false;
        if ((!dateF.getText().isEmpty()) && (!nbNuitsF.getText().isEmpty())) {
            rechercherB.setEnabled(true);
        } else {
            rechercherB.setEnabled(false);
        }
    }//GEN-LAST:event_nbNuitsFKeyReleased

    private void numChambreFCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_numChambreFCaretUpdate
        if ((!numChambreF.getText().isEmpty()) && (updated) && (!idCR.getText().isEmpty())) {
            reserverB.setEnabled(true);
        } else {
            reserverB.setEnabled(false);
        }
    }//GEN-LAST:event_numChambreFCaretUpdate

    private void numResaFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numResaFKeyReleased
        if (numResaF.getText().isEmpty()) {
            factureB.setEnabled(false);
        } else {
            factureB.setEnabled(true);
        }
    }//GEN-LAST:event_numResaFKeyReleased

    private void reserverBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserverBActionPerformed
        List<Integer> selected = listChambres.getSelectedValuesList();
        String date = dateF.getText();
        String nb = nbNuitsF.getText();
        controleur.demandeReservation(selected, date, nb, idCR.getText());
    }//GEN-LAST:event_reserverBActionPerformed

    private void testDesactiverRechercherCB() {
        if ((nomC.getText().isEmpty()) && (idC.getText().isEmpty())) {
            rechercherCB.setEnabled(false);
        }
    }

    private void nomCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomCKeyReleased
        if (!nomC.getText().isEmpty()) {
            rechercherCB.setEnabled(true);
        } else {
            testDesactiverRechercherCB();
        }
    }//GEN-LAST:event_nomCKeyReleased

    private void idCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idCKeyReleased
        if (!idC.getText().isEmpty()) {
            rechercherCB.setEnabled(true);
        } else {
            testDesactiverRechercherCB();
        }
    }//GEN-LAST:event_idCKeyReleased

    private void idCRCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_idCRCaretUpdate
        if ((!numChambreF.getText().isEmpty()) && (updated) && (!idCR.getText().isEmpty())) {
            reserverB.setEnabled(true);
        } else {
            reserverB.setEnabled(false);
        }
    }//GEN-LAST:event_idCRCaretUpdate

    private void rechercherCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercherCBActionPerformed
        if (nomC.getText().isEmpty()) {
            controleur.rechercheClientID(idC.getText());
        } else {
            controleur.rechercheClientNom(nomC.getText());
        }
    }//GEN-LAST:event_rechercherCBActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        nomC.setText("");
        prenomC.setText("");
        dateC.setText("");
        idC.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void effacerBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_effacerBActionPerformed
        updated = false;
        controleur.filtrerDispoChambres("", "", "");
    }//GEN-LAST:event_effacerBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLabelDateC;
    private javax.swing.JButton afficherB;
    private javax.swing.JButton creerB;
    private javax.swing.JTextField dateC;
    private javax.swing.JTextField dateF;
    private javax.swing.JButton effacerB;
    private javax.swing.JTextArea errorLabel;
    private javax.swing.JButton factureB;
    private javax.swing.JButton gererB;
    private javax.swing.JTextField idC;
    private javax.swing.JTextField idCR;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList listChambres;
    private javax.swing.JTextField loginF;
    private javax.swing.JTextField nbNuitsF;
    private javax.swing.JTextField nomC;
    private javax.swing.JTextField numChambreF;
    private javax.swing.JTextField numResaF;
    private javax.swing.JPasswordField passwordF;
    private javax.swing.JTextField prenomC;
    private javax.swing.JButton rechercherB;
    private javax.swing.JButton rechercherCB;
    private javax.swing.JButton reserverB;
    private javax.swing.JTable tableResa;
    private javax.swing.JTextField tailleF;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void init(List<Integer> idsChambre, List<Integer> tailles, HashMap<Integer, List<Integer>> resa, List<Date> datesDebut, List<Integer> nbsJours, List<Integer> idsClient) {
        listChambres.setListData(idsChambre.toArray());
        tableR.update(resa, datesDebut, nbsJours, idsClient);
        errorLabel.setVisible(false);
    }

    @Override
    public void reservationsModifiees(HashMap<Integer, List<Integer>> resa, List<Date> datesDebut, List<Integer> nbsJours, List<Integer> idsClient) {
        tableR.update(resa, datesDebut, nbsJours, idsClient);
        errorLabel.setVisible(false);
    }

    @Override
    public void chambresModifiees(List<Integer> idsChambre, List<Integer> tailles) {
        listChambres.removeAll();
        listChambres.setListData(idsChambre.toArray());
        errorLabel.setVisible(false);
    }

    @Override
    public void clientRecherche(String nom, String prenom, String date, int id) {
        nomC.setText(nom);
        prenomC.setText(prenom);
        dateC.setText(date);
        idC.setText(id + "");
    }
}
